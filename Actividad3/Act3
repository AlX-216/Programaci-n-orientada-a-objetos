import matplotlib.pyplot as plt

# Algoritmo FCFS
def fcfs(requests, start):
    order = [start] + requests
    movements = sum(abs(order[i+1] - order[i]) for i in range(len(order)-1))
    return order, movements

# Algoritmo SSTF
def sstf(requests, start):
    order = [start]
    pending = requests[:]
    current = start
    while pending:
        next_request = min(pending, key=lambda r: abs(r - current))
        pending.remove(next_request)
        order.append(next_request)
        current = next_request
    movements = sum(abs(order[i+1] - order[i]) for i in range(len(order)-1))
    return order, movements

# Algoritmo SCAN

def scan(requests, start, max_track=199):
    left = sorted([r for r in requests if r < start], reverse=True)
    right = sorted([r for r in requests if r >= start])
    order = [start] + right + [max_track] + left
    movements = sum(abs(order[i+1] - order[i]) for i in range(len(order)-1))
    return order, movements

# Gráfico del movimiento de la cabeza
def plot_movement(order, algo_name):
    plt.plot(order, range(len(order)), marker='o', linestyle='-')
    plt.title(f'Movimiento del disco - {algo_name}')
    plt.xlabel('Posición de pista')
    plt.ylabel('Orden de acceso')
    plt.gca().invert_yaxis()
    plt.show()

# Datos de entrada
requests = [95, 180, 34, 119, 11, 123, 62, 64]
start = 50

# FCFS
order_fcfs, moves_fcfs = fcfs(requests, start)
plot_movement(order_fcfs, "FCFS")
print("FCFS - Orden de atención:", order_fcfs)
print("FCFS - Movimientos totales:", moves_fcfs)

# SSTF
order_sstf, moves_sstf = sstf(requests, start)
plot_movement(order_sstf, "SSTF")
print("SSTF - Orden de atención:", order_sstf)
print("SSTF - Movimientos totales:", moves_sstf)

# SCAN
order_scan, moves_scan = scan(requests, start)
plot_movement(order_scan, "SCAN")
print("SCAN - Orden de atención:", order_scan)
print("SCAN - Movimientos totales:", moves_scan)

# Análisis de resultados
results = {
    "FCFS": moves_fcfs,
    "SSTF": moves_sstf,
    "SCAN": moves_scan
}

print("Análisis de resultados:")
for algo, moves in results.items():
    print(f"{algo}: {moves} movimientos")

best = min(results, key=results.get)
print(f"El algoritmo más eficiente es {best} porque tiene el menor número de movimientos.")

# Ventajas y desventajas breves
def analysis():
    print("\nVentajas y desventajas de los algoritmos:")
    print("FCFS: Simple y justo, pero puede ser ineficiente con secuencias largas.")
    print("SSTF: Optimiza movimientos pero puede causar inanición de solicitudes lejanas.")
    print("SCAN: Equilibra el rendimiento y la justicia, aunque favorece las solicitudes centrales.")

analysis()

